#+title: Implement DH with negotiated groups, and break with malicious "g" parameters
#+roam_tags:
#+setupfile: ./setup.org

* Case 1: g = 1
A->M: p, g_a
M->B: p, 1

B->M: ACK
M->A: ACK

A->M: A
M->B: A
- s_B = pow(A, b, p) = unknown

B->M: B = pow(g, b, p) = 1
M->B: B
- s_A = pow(B = 1, a, p) = 1
- s_A != s_B
- We can decipher messages from A but not B, and neither can A.

* Case 1A: g = 1, A = 1
A->M: p, g
M->B: p, 1

B->M: ACK
M->A: ACK

A->M: A
M->B: A' = pow(1, a, p) = 1
- Here, we change A to 1 so that s_B = pow(A', b, p) = 1

B->M: B
M->B: B
- B = pow(1, b, p) = 1
- s_A = pow(B = 1, a, p) = 1 = s_B

continue the rest of the attack in the same way as 34

* Case 2: g = p
A->M: p, g_a
M->B: p, p

B->A: ACK

A->B: A
- s_B = pow(A, b, p) = unknown

B->A: B
- B = pow(g=p, b, p) = 0
- s_A = pow(B, a, p) = 0

Use s_A to decrypt the message
* Case 2A: g = p, A = 0
A->M: p, g_a
M->B: p, p

B->M: ACK
M->A: ACK

A->M: A
M->B: A' = 0
- Here, we change A to 0 so that s_B = pow(A', b, p) = 0
- Set A' to p for some stealth.

B->M: B
M->B: B
- B = pow(p, b, p) = 0
- s_A = pow(B, a, p) = 0 = s_B

continue the rest of the attack in the same way as 34
* Case 3: g = p - 1
A->M: p, g_a
M->B: p, p-1

B->A: ACK

A->B: A = pow(g, a, p)

B->A: B = pow(g=p-1, b, p) = p-1
- s_A = pow(p-1, a, p) = p-1 OR 1
  - n-1 to an odd power mod n is n-1
  - n-1 to an even power mod n is 1

Use s_A to decrypt the message
